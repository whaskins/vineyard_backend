version: '3.8'

services:
  api:
    image: 283282846400.dkr.ecr.us-east-1.amazonaws.com/vineyard/backend:1.27
    platform: linux/amd64
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - SEED_DB=true
    depends_on:
      - db
    command: ./start.sh
    restart: always
    # Mount volume for image storage
    volumes:
      - issue_images:/app/app/static/uploads/images
    # Using a shared network so containers can communicate
    networks:
      - backend

  dashboard:
    image: 283282846400.dkr.ecr.us-east-1.amazonaws.com/vineyard/dashboard:1.2-amd64
    platform: linux/amd64
    ports:
      - "80:80"
    environment:
      # Connect to the API container using internal Docker network
      - API_URL=http://api:8080/api/v1
    depends_on:
      - api
    restart: always
    networks:
      - backend
    # Optional health check to ensure the dashboard is running correctly
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    # Mount custom files to enhance the dashboard
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./dashboard-dev.html:/usr/share/nginx/html/dev.html

  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./db_postgres.sql:/docker-entrypoint-initdb.d/db_postgres.sql
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=vineyard_inventory
    ports:
      - "5432:5432"
    networks:
      - backend

# Define a bridge network for container communication
networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
  issue_images: