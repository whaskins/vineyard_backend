# Stage 1: Clone and modify the original dashboard
FROM alpine:latest as source

# Install necessary tools
RUN apk add --no-cache git nodejs npm

# Clone or set up your source directory
# (In a real scenario, you'd clone your repo here)
WORKDIR /app

# Create directory structure for a minimal Angular app
RUN mkdir -p src/app/services src/app/models src/app/core src/environments

# Create a basic environment configuration file with API URL
RUN echo 'export const environment = { production: true, apiUrl: "/api/v1" };' > src/environments/environment.prod.ts
RUN echo 'export const environment = { production: false, apiUrl: "/api/v1" };' > src/environments/environment.ts

# Create a basic API service that connects to the backend
RUN echo 'import { Injectable } from "@angular/core";
import { HttpClient } from "@angular/common/http";
import { Observable } from "rxjs";
import { environment } from "../../environments/environment";

@Injectable({
  providedIn: "root"
})
export class ApiService {
  private apiUrl = environment.apiUrl;

  constructor(private http: HttpClient) {}

  // Vines API
  getVines(params: any = {}): Observable<any> {
    return this.http.get(`${this.apiUrl}/vines`, { params });
  }

  getVineById(id: string): Observable<any> {
    return this.http.get(`${this.apiUrl}/vines/${id}`);
  }

  // Issues API
  getIssues(params: any = {}): Observable<any> {
    return this.http.get(`${this.apiUrl}/issues`, { params });
  }

  getIssueById(id: string): Observable<any> {
    return this.http.get(`${this.apiUrl}/issues/${id}`);
  }

  // Auth API
  login(username: string, password: string): Observable<any> {
    const formData = new FormData();
    formData.append("username", username);
    formData.append("password", password);
    return this.http.post(`${this.apiUrl}/login/access-token`, formData);
  }

  getCurrentUser(): Observable<any> {
    return this.http.get(`${this.apiUrl}/users/me`);
  }
}' > src/app/services/api.service.ts

# Stage It would have a complete Angular app here

# Stage 2: Runtime with Nginx - same as original image
FROM nginx:alpine

# Copy the build output from the original image (not shown here)
# COPY --from=original-build /app/dist/vineyard-dashboard/ /usr/share/nginx/html/

# Enhance the Nginx configuration for API proxying
RUN echo 'server {
    listen 80;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;

    # Gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 1000;

    # Cache static assets
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        expires 1y;
        add_header Cache-Control "public, max-age=31536000";
    }

    # Proxy API requests to the backend
    location /api/ {
        proxy_pass http://api:8080/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
    }

    # Handle Angular routing - redirect all requests to index.html
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Security headers with more permissive CSP for development
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header Content-Security-Policy "default-src * self blob: data: gap:; style-src * self inline: data: blob:; script-src * self unsafe-inline unsafe-eval blob: data: gap:; connect-src * self blob: data: gap:; object-src * self blob: data: gap:; img-src * self blob: data: gap:; font-src * self data: gap:; frame-src *;" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
}' > /etc/nginx/conf.d/default.conf

# Create a simple placeholder page that explains the situation
RUN echo '<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vineyard Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        .card {
            background: #f9f9f9;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        h1, h2 {
            color: #2c3e50;
        }
        code {
            background: #e9e9e9;
            padding: 2px 5px;
            border-radius: 3px;
        }
        .btn {
            display: inline-block;
            background: #3498db;
            color: white;
            padding: 8px 16px;
            border-radius: 4px;
            text-decoration: none;
            margin-right: 10px;
        }
        .api-test {
            margin-top: 30px;
        }
        #apiResult {
            background: #f1f1f1;
            padding: 15px;
            border-radius: 4px;
            margin-top: 10px;
            white-space: pre-wrap;
        }
    </style>
</head>
<body>
    <h1>Vineyard Inventory Dashboard</h1>
    
    <div class="card">
        <h2>Backend Connection Status</h2>
        <p>This dashboard is currently in development mode with placeholder data. To complete the implementation:</p>
        <ol>
            <li>Ensure the backend API is running and accessible</li>
            <li>Update the Angular services to connect to the API endpoints</li>
            <li>Replace dummy data with real data from the API</li>
        </ol>
    </div>
    
    <div class="card api-test">
        <h2>Test API Connection</h2>
        <button id="testApi" class="btn">Test API Connection</button>
        <button id="testVines" class="btn">Load Vines Data</button>
        <div id="apiResult">Results will appear here...</div>
    </div>

    <script>
        document.getElementById("testApi").addEventListener("click", function() {
            const resultEl = document.getElementById("apiResult");
            resultEl.textContent = "Testing API connection...";
            
            fetch("/api/v1/users/me", {
                headers: {
                    "Authorization": "Bearer " + (localStorage.getItem("token") || "")
                }
            })
            .then(response => {
                if (!response.ok) {
                    if (response.status === 401) {
                        throw new Error("Unauthorized: Please log in first");
                    }
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                resultEl.textContent = "API Connection Successful: Current User\\n" + JSON.stringify(data, null, 2);
            })
            .catch(error => {
                resultEl.textContent = "API Connection Error: " + error.message;
            });
        });
        
        document.getElementById("testVines").addEventListener("click", function() {
            const resultEl = document.getElementById("apiResult");
            resultEl.textContent = "Loading vines data...";
            
            fetch("/api/v1/vines?limit=5", {
                headers: {
                    "Authorization": "Bearer " + (localStorage.getItem("token") || "")
                }
            })
            .then(response => {
                if (!response.ok) {
                    if (response.status === 401) {
                        throw new Error("Unauthorized: Please log in first");
                    }
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                resultEl.textContent = "Vines Data Loaded Successfully:\\n" + JSON.stringify(data, null, 2);
            })
            .catch(error => {
                resultEl.textContent = "Error Loading Vines Data: " + error.message;
            });
        });
    </script>
</body>
</html>' > /usr/share/nginx/html/index.html